.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` 
.    ds C' 
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "GVPE.CONF 5"
.TH GVPE.CONF 5 "2005-03-17" "1.8" "GNU Virtual Private Ethernet"
.SH "NAME"
gvpe.conf \- configuration file for the GNU VPE daemon
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&   udp-port = 407
\&   mtu = 1492
\&   ifname = vpn0
.Ve
.PP
.Vb 2
\&   node = branch1
\&   hostname = 1.2.3.4
.Ve
.PP
.Vb 3
\&   node = branch2
\&   hostname = www.example.net
\&   udp-port = 500       # this host uses a different udp-port
.Ve
.PP
.Vb 2
\&   node = branch3
\&   connect = ondemand
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The gvpe config file consists of a series of lines that contain \f(CW\*(C`variable
= value\*(C'\fR pairs. Empty lines are ignored. Comments start with a \f(CW\*(C`#\*(C'\fR and
extend to the end of the line. They can be used on their own lines, or
after any directives. Spaces are allowed before or after the \f(CW\*(C`=\*(C'\fR sign or
after values, but not within the variable names or values themselves.
.PP
The only exception to the above is the \*(L"on\*(R" directive that can prefix any
\&\f(CW\*(C`name = value\*(C'\fR setting and will only \*(L"execute\*(R" it on the named node, or
(if the nodename starts with \*(L"!\*(R") on all nodes except the named one.
.PP
.Vb 3
\&   name = value
\&   on branch1 loglevel = noise
\&   on !branch2 connect = ondemand
.Ve
.PP
All settings are executed \*(L"in order\*(R", that is, later settings of the same
variable overwrite earlier ones.
.SH "ANATOMY OF A CONFIG FILE"
.IX Header "ANATOMY OF A CONFIG FILE"
Usually, a config file starts with global settings (like the udp port to
listen on), followed by node-specific sections that begin with a \f(CW\*(C`node =
nickname\*(C'\fR line.
.PP
Every node that is part of the network must have a section that starts
with \f(CW\*(C`node = nickname\*(C'\fR. The number and order of the nodes is important
and must be the same on all hosts. It is not uncommon for node sections to
be completely empty \- if the default values are right.
.PP
Node-specific settings can be used at any time. If used before the first
node section they will set the default values for all following nodes.
.SH "CONFIG VARIABLES"
.IX Header "CONFIG VARIABLES"
.Sh "\s-1GLOBAL\s0 \s-1SETTINGS\s0"
.IX Subsection "GLOBAL SETTINGS"
Global settings will affect the behaviour of the running gvpe daemon, that
is, they are in some sense node-specific (config files can set different
values on different nodes using \f(CW\*(C`on\*(C'\fR), but will affect the behaviour of
the gvpe daemon and all connections it creates.
.IP "dns-forw-host = hostname/ip" 4
.IX Item "dns-forw-host = hostname/ip"
The dns server to forward dns requests to for the \s-1DNS\s0 tunnel protocol
(default: \f(CW127.0.0.1\fR, changing it is highly recommended).
.IP "dns-forw-port = port-number" 4
.IX Item "dns-forw-port = port-number"
The port where the \f(CW\*(C`dns\-forw\-host\*(C'\fR is to be contacted (default: \f(CW53\fR,
which is fine in most cases).
.IP "if-up = relative-or-absolute-path" 4
.IX Item "if-up = relative-or-absolute-path"
Sets the path of a script that should be called immediately after the
network interface is initialized (but not neccessarily up). The following
environment variables are passed to it (the values are just examples):
.RS 4
.IP "CONFBASE=/etc/gvpe" 4
.IX Item "CONFBASE=/etc/gvpe"
The configuration base directory.
.IP "IFNAME=vpn0" 4
.IX Item "IFNAME=vpn0"
The interface to initialize.
.IP "MTU=1436" 4
.IX Item "MTU=1436"
The \s-1MTU\s0 to set the interface to. You can use lower values (if done
consistently on all hosts), but this is usually ineffective.
.IP "MAC=fe:fd:80:00:00:01" 4
.IX Item "MAC=fe:fd:80:00:00:01"
The \s-1MAC\s0 address to set the interface to. The script *must* set the
interface \s-1MAC\s0 to this value. You will most likely use one of these:
.Sp
.Vb 2
\&   ip link set $IFNAME address $MAC mtu $MTU up # GNU/Linux
\&   ifconfig $IFNAME ether $MAC mtu $MTU up      # FreeBSD
.Ve
.Sp
Please see the \f(CW\*(C`gvpe.osdep(5)\*(C'\fR manpage for platform-specific information.
.IP "IFTYPE=native # or tincd" 4
.IX Item "IFTYPE=native # or tincd"
.PD 0
.IP "IFSUBTYPE=linux # or freebsd, darwin etc.." 4
.IX Item "IFSUBTYPE=linux # or freebsd, darwin etc.."
.PD
The interface type (\f(CW\*(C`native\*(C'\fR or \f(CW\*(C`tincd\*(C'\fR) and the subtype (usually the os
name in lowercase) that this gvpe was configured for. Can be used to select
the correct syntax to use for network-related commands.
.IP "NODENAME=branch1" 4
.IX Item "NODENAME=branch1"
The nickname of the current node, as passed to the gvpe daemon.
.IP "NODEID=1" 4
.IX Item "NODEID=1"
The numerical node id of the current node. The first node mentioned in the
config file gets \s-1ID\s0 1, the second \s-1ID\s0 2 and so on.
.RE
.RS 4
.Sp
Here is a simple if-up script:
.Sp
.Vb 5
\&   #!/bin/sh
\&   ip link set $IFNAME address $MAC mtu $MTU up
\&   [ $NODENAME = branch1 ] && ip addr add 10.0.0.1 dev $IFNAME
\&   [ $NODENAME = branch2 ] && ip addr add 10.1.0.1 dev $IFNAME
\&   ip route add 10.0.0.0/8 dev $IFNAME
.Ve
.Sp
More complicated examples (using routing to reduce arp traffic) can be
found in the etc/ subdirectory of the distribution.
.RE
.IP "ifname = devname" 4
.IX Item "ifname = devname"
Sets the tun interface name to the given name. The default is OS-specific
and most probably something like \f(CW\*(C`tun0\*(C'\fR.
.IP "ifpersist = yes|true|on | no|false|off" 4
.IX Item "ifpersist = yes|true|on | no|false|off"
Should the tun/tap device be made persistent, that is, should the device
stay up even when gvpe exits? Some versions of the tunnel device have
problems sending packets when gvpe is restarted in persistent mode, so
if the connections can be established but you cannot send packets from
the local node, try to set this to \f(CW\*(C`off\*(C'\fR and do an ifconfig down on the
device.
.IP "ip-proto = numerical-ip-protocol" 4
.IX Item "ip-proto = numerical-ip-protocol"
Sets the protocol number to be used for the rawip protocol. This is a
global option because all hosts must use the same protocol, and since
there are no port numbers, you cannot easily run more than one gvpe
instance using the same protocol, nor can you share the protocol with
other programs.
.Sp
The default is 47 (\s-1GRE\s0), which has a good chance of tunneling through
firewalls (but note that the rawip protocol is not \s-1GRE\s0 compatible). Other
common choices are 50 (\s-1IPSEC\s0, \s-1ESP\s0), 51 (\s-1IPSEC\s0, \s-1AH\s0), 4 (\s-1IPIP\s0 tunnels) or 98
(\s-1ENCAP\s0, rfc1241)
.IP "http-proxy-host = hostname/ip" 4
.IX Item "http-proxy-host = hostname/ip"
The \f(CW\*(C`http\-proxy\-*\*(C'\fR family of options are only available if gvpe was
compiled with the \f(CW\*(C`\-\-enable\-http\-proxy\*(C'\fR option and enable tunneling of
tcp connections through a http proxy server.
.Sp
\&\f(CW\*(C`http\-proxy\-host\*(C'\fR and \f(CW\*(C`http\-proxy\-port\*(C'\fR should specify the hostname and
port number of the proxy server. See \f(CW\*(C`http\-proxy\-loginpw\*(C'\fR if your proxy
requires authentication.
.Sp
Please note that gvpe will still try to resolve all hostnames in the
configuration file, so if you are behind a proxy without access to a dns
server better use numerical \s-1IP\s0 addresses.
.Sp
To make best use of this option disable all protocols except tcp in your
config file and make sure your routers (or all other hosts) are listening
on a port that the proxy allows (443, https, is a common choice).
.Sp
If you have a router, connecting to it will suffice. Otherwise tcp must be
enabled on all hosts.
.Sp
Example:
.Sp
.Vb 3
\&   http-proxy-host = proxy.example.com
\&   http-proxy-port = 3128       # 8080 is another common choice
\&   http-proxy-auth = schmorp:grumbeere
.Ve
.IP "http-proxy-port = proxy-tcp-port" 4
.IX Item "http-proxy-port = proxy-tcp-port"
The port where your proxy server listens.
.IP "http-proxy-auth = login:password" 4
.IX Item "http-proxy-auth = login:password"
The optional login and password used to authenticate to the proxy server,
seperated by a literal colon (\f(CW\*(C`:\*(C'\fR). Only basic authentication is
currently supported.
.IP "keepalive = seconds" 4
.IX Item "keepalive = seconds"
Sets the keepalive probe interval in seconds (default: \f(CW60\fR). After this
many seconds of inactivity the daemon will start to send keepalive probe
every 5 seconds until it receives a reply from the other end.  If no reply
is received within 30 seconds, the peer is considered unreachable and the
connection is closed.
.IP "loglevel = noise|trace|debug|info|notice|warn|error|critical" 4
.IX Item "loglevel = noise|trace|debug|info|notice|warn|error|critical"
Set the logging level. Connection established messages are logged at level
\&\f(CW\*(C`info\*(C'\fR, notable errors are logged with \f(CW\*(C`error\*(C'\fR. Default is \f(CW\*(C`info\*(C'\fR.
.IP "mtu = bytes" 4
.IX Item "mtu = bytes"
Sets the maximum \s-1MTU\s0 that should be used on outgoing packets (basically
the \s-1MTU\s0 of the outgoing interface) The daemon will automatically calculate
maximum overhead (e.g. udp header size, encryption blocksize...) and pass
this information to the \f(CW\*(C`if\-up\*(C'\fR script.
.Sp
Recommended values are 1500 (ethernet), 1492 (pppoe), 1472 (pptp).
.Sp
This value must be the minimum of the mtu values of all hosts.
.IP "node = nickname" 4
.IX Item "node = nickname"
Not really a config setting but introduces a node section. The nickname is
used to select the right configuration section and must be passed as an
argument to the gvpe daemon.
.IP "node-up = relative-or-absolute-path" 4
.IX Item "node-up = relative-or-absolute-path"
Sets a command (default: no script) that should be called whenever a
connection is established (even on rekeying operations). In addition
to the variables passed to \f(CW\*(C`if\-up\*(C'\fR scripts, the following environment
variables will be set:
.RS 4
.IP "DESTNODE=branch2" 4
.IX Item "DESTNODE=branch2"
The name of the remote node.
.IP "DESTID=2" 4
.IX Item "DESTID=2"
The node id of the remote node.
.IP "DESTIP=188.13.66.8" 4
.IX Item "DESTIP=188.13.66.8"
The numerical \s-1IP\s0 address of the remote host (gvpe accepts connections from
everywhere, as long as the other host can authenticate itself).
.IP "DESTPORT=655 # deprecated" 4
.IX Item "DESTPORT=655 # deprecated"
The \s-1UDP\s0 port used by the other side.
.IP "STATE=UP" 4
.IX Item "STATE=UP"
Node-up scripts get called with STATE=UP, node-down scripts get called
with STATE=DOWN.
.RE
.RS 4
.Sp
Here is a nontrivial example that uses nsupdate to update the name => ip
mapping in some dns zone:
.Sp
.Vb 6
\&   #!/bin/sh
\&   {
\&     echo update delete $DESTNODE.lowttl.example.net. a
\&     echo update add $DESTNODE.lowttl.example.net. 1 in a $DESTIP
\&     echo   
\&   } | nsupdate -d -k $CONFBASE:key.example.net.
.Ve
.RE
.IP "node-down = relative-or-absolute-path" 4
.IX Item "node-down = relative-or-absolute-path"
Same as \f(CW\*(C`node\-up\*(C'\fR, but gets called whenever a connection is lost.
.IP "pid-file = path" 4
.IX Item "pid-file = path"
The path to the pid file to check and create
(default: \f(CW\*(C`LOCALSTATEDIR/run/gvpe.pid\*(C'\fR).
.IP "private-key = relative-path-to-key" 4
.IX Item "private-key = relative-path-to-key"
Sets the path (relative to the config directory) to the private key
(default: \f(CW\*(C`hostkey\*(C'\fR). This is a printf format string so every \f(CW\*(C`%\*(C'\fR must
be doubled. A single \f(CW%s\fR is replaced by the hostname, so you could
use paths like \f(CW\*(C`hostkeys/%s\*(C'\fR to fetch the files at the location where
\&\f(CW\*(C`gvpectrl\*(C'\fR puts them.
.Sp
Since only the private key file of the current node is used and the
private key file should be kept secret per-host to avoid spoofings, it is
not recommended to use this feature.
.IP "rekey = seconds" 4
.IX Item "rekey = seconds"
Sets the rekeying interval in seconds (default: \f(CW3600\fR). Connections are
reestablished every \f(CW\*(C`rekey\*(C'\fR seconds.
.Sh "\s-1NODE\s0 \s-1SPECIFIC\s0 \s-1SETTINGS\s0"
.IX Subsection "NODE SPECIFIC SETTINGS"
The following settings are node\-specific, that is, every node can have
different settings, even within the same gvpe instance. Settings that are
executed before the first node section set the defaults, settings that are
executed within a node section only apply to the given node.
.IP "compress = yes|true|on | no|false|off" 4
.IX Item "compress = yes|true|on | no|false|off"
Wether to compress data packets sent to this host (default: \f(CW\*(C`yes\*(C'\fR).
Compression is really cheap even on slow computers and has no size
overhead at all, so enabling this is a good idea.
.IP "connect = ondemand | never | always | disabled" 4
.IX Item "connect = ondemand | never | always | disabled"
Sets the connect mode (default: \f(CW\*(C`always\*(C'\fR). It can be \f(CW\*(C`always\*(C'\fR (always
try to establish and keep a connection to the given host), \f(CW\*(C`never\*(C'\fR
(never initiate a connection to the given host, but accept connections),
\&\f(CW\*(C`ondemand\*(C'\fR (try to establish a connection on the first packet sent, and
take it down after the keepalive interval) or \f(CW\*(C`disabled\*(C'\fR (node is bad,
don't talk to it).
.IP "dns-domain = domain-suffix" 4
.IX Item "dns-domain = domain-suffix"
The \s-1DNS\s0 domain suffix that points to the \s-1DNS\s0 tunnel server for this node.
.Sp
The domain must point to a \s-1NS\s0 record that points to the \fIdns-hostname\fR,
i.e.
.Sp
.Vb 2
\&   dns-domainname = tunnel.example.net
\&   dns-hostname   = tunnel-server.example.net
.Ve
.Sp
Corresponds to the following \s-1DNS\s0 entries in the \f(CW\*(C`example.net\*(C'\fR domain:
.Sp
.Vb 2
\&   tunnel.example.net.         NS tunnel-server.example.net.
\&   tunnel-server.example.net.  A  13.13.13.13
.Ve
.IP "dns-hostname = hostname/ip" 4
.IX Item "dns-hostname = hostname/ip"
The address to bind the \s-1DNS\s0 tunnel socket to, similar to the \f(CW\*(C`hostname\*(C'\fR,
but for the \s-1DNS\s0 tunnel protocol only. Default: \f(CW0.0.0.0\fR, but that might
change.
.IP "dns-port = port-number" 4
.IX Item "dns-port = port-number"
The port to bind the \s-1DNS\s0 tunnel socket to. Must be \f(CW53\fR on \s-1DNS\s0 tunnel servers.
.IP "enable-dns = yes|true|on | no|false|off" 4
.IX Item "enable-dns = yes|true|on | no|false|off"
See \fIgvpe.protocol\fR\|(7) for a description of the \s-1DNS\s0 transport
protocol. Avoid this protocol if you can.
.Sp
Enable the \s-1DNS\s0 tunneling protocol on this node, either as server or as
client. Support for this transport protocol is only available when gvpe
was compiled using the \f(CW\*(C`\-\-enable\-dns\*(C'\fR option.
.IP "enable-icmp = yes|true|on | no|false|off" 4
.IX Item "enable-icmp = yes|true|on | no|false|off"
See \fIgvpe.protocol\fR\|(7) for a description of the \s-1ICMP\s0 transport protocol.
.Sp
Enable the \s-1ICMP\s0 transport using icmp packets of type \f(CW\*(C`icmp\-type\*(C'\fR on this
node.
.IP "enable-rawip = yes|true|on | no|false|off" 4
.IX Item "enable-rawip = yes|true|on | no|false|off"
See \fIgvpe.protocol\fR\|(7) for a description of the \s-1RAW\s0 \s-1IP\s0 transport protocol.
.Sp
Enable the \s-1RAW\s0 IPv4 transport using the \f(CW\*(C`ip\-proto\*(C'\fR protocol
(default: \f(CW\*(C`no\*(C'\fR).
.IP "enable-tcp = yes|true|on | no|false|off" 4
.IX Item "enable-tcp = yes|true|on | no|false|off"
See \fIgvpe.protocol\fR\|(7) for a description of the \s-1TCP\s0 transport protocol.
.Sp
Enable the TCPv4 transport using the \f(CW\*(C`tcp\-port\*(C'\fR port
(default: \f(CW\*(C`no\*(C'\fR). Support for this transport protocol is only available
when gvpe was compiled using the \f(CW\*(C`\-\-enable\-tcp\*(C'\fR option.
.IP "enable-udp = yes|true|on | no|false|off" 4
.IX Item "enable-udp = yes|true|on | no|false|off"
See \fIgvpe.protocol\fR\|(7) for a description of the \s-1UDP\s0 transport protocol.
.Sp
Enable the UDPv4 transport using the \f(CW\*(C`udp\-port\*(C'\fR port (default: \f(CW\*(C`no\*(C'\fR,
unless no other protocol is enabled for a node, in which case this
protocol is enabled automatically).
.Sp
\&\s-1NOTE:\s0 Please specify \f(CW\*(C`enable\-udp = yes\*(C'\fR if you want t use it even though
it might get switched on automatically, as some future version might
default to another default protocol.
.IP "icmp-type = integer" 4
.IX Item "icmp-type = integer"
Sets the type value to be used for outgoing (and incoming) packets sent
via the \s-1ICMP\s0 transport.
.Sp
The default is \f(CW0\fR (which is \f(CW\*(C`echo\-reply\*(C'\fR, also known as
\&\*(L"ping\-replies\*(R"). Other useful values include \f(CW8\fR (\f(CW\*(C`echo\-request\*(C'\fR, a.k.a.
\&\*(L"ping\*(R") and \f(CW11\fR (\f(CW\*(C`time\-exceeded\*(C'\fR), but any 8\-bit value can be used.
.IP "inherit-tos = yes|true|on | no|false|off" 4
.IX Item "inherit-tos = yes|true|on | no|false|off"
Wether to inherit the \s-1TOS\s0 settings of packets sent to the tunnel when
sending packets to this node (default: \f(CW\*(C`yes\*(C'\fR). If set to \f(CW\*(C`yes\*(C'\fR then
outgoing tunnel packets will have the same \s-1TOS\s0 setting as the packets sent
to the tunnel device, which is usually what you want.
.IP "max-retry = positive-number" 4
.IX Item "max-retry = positive-number"
The maximum interval in seconds (default: \f(CW3600\fR, one hour) between
retries to establish a connection to this node. When a connection cannot
be established, gvpe uses exponential backoff capped at this value. It's
sometimes useful to set this to a much lower value (e.g. \f(CW120\fR) on
connections to routers that usually are stable but sometimes are down, to
assure quick reconnections even after longer downtimes.
.IP "router-priority = 0 | 1 | positive\-number>=2" 4
.IX Item "router-priority = 0 | 1 | positive-number>=2"
Sets the router priority of the given host (default: \f(CW0\fR, disabled). If
some host tries to connect to another host without a hostname, it asks
the router host for it's \s-1IP\s0 address. The router host is the one with the
highest priority larger than \f(CW1\fR that is currently reachable.
.Sp
Make sure all hosts always connect (\f(CW\*(C`connect = always\*(C'\fR) to the router
hosts, otherwise connecting to them might be impossible.
.Sp
The special value \f(CW1\fR allows other hosts to route through the router
host, but they will never route through it by default. The value \f(CW0\fR
disables routing. The idea behind this is that some hosts can, if
required, bump the \f(CW\*(C`router\-priority\*(C'\fR setting to higher than \f(CW1\fR in their
local config to route through specific hosts. If \f(CW\*(C`router\-priority\*(C'\fR is
\&\f(CW0\fR, then routing will be refused, so \f(CW1\fR serves as a \*(L"enable, but do
not use by default\*(R" switch.
.IP "tcp-port = port-number" 4
.IX Item "tcp-port = port-number"
Similar to \f(CW\*(C`udp\-port\*(C'\fR (default: \f(CW655\fR), but sets the \s-1TCP\s0 port number.
.IP "udp-port = port-number" 4
.IX Item "udp-port = port-number"
Sets the port number used by the \s-1UDP\s0 protocol (default: \f(CW655\fR, not
officially assigned by \s-1IANA\s0!).
.SH "CONFIG DIRECTORY LAYOUT"
.IX Header "CONFIG DIRECTORY LAYOUT"
The default (or recommended) directory layout for the config directory is:
.IP "\(bu" 4
.IX Xref "gvpe.conf"
The config file.
.IP "\(bu" 4
.IX Xref "if-up"
The if-up script
.IP "," 4
.IX Xref "node-up node-down"
If used the node up or node-down scripts.
.IP "\(bu" 4
.IX Xref "hostkey"
The private key (taken from \f(CW\*(C`hostkeys/nodename\*(C'\fR) of the current host.
.IP "\(bu" 4
.IX Xref "pubkey nodename"
The public keys of the other nodes, one file per node.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIgvpe\fR\|(5), \fIgvpe\fR\|(8), \fIgvpectrl\fR\|(8).
.SH "AUTHOR"
.IX Header "AUTHOR"
Marc Lehmann <gvpe@plan9.de>
