=head1 The GNU-VPE Protocols

=head1 Overview

GVPE can make use of a number of protocols. One of them is the GNU VPE
protocol which is used to authenticate tunnels and send encrypted data
packets. This protocol is described in more detail the second part of this
document.

The first part of this document describes the transport protocols which
are used by GVPE to send it's data packets over the network.

=head1 PART 1: Tansport protocols

GVPE offers a range of transport protocols that can be used to interchange
data between nodes. Protocols differ in their overhead, speed,
reliability, and robustness.

The following sections describe each transport protocol in more
detail. They are sorted by overhead/efficiency, the most efficient
transprot is listed first:

=head2 RAW IP

This protocol is the best choice, performance-wise, as the minimum
overhead per packet is only 38 bytes.

It works by sending the VPN payload using raw ip frames (using the
protocol set by C<ip-proto>).

Using raw ip frames has the drawback that many firewalls block "unknown"
protocols, so this transport only works if you have full IP connectivity
between nodes.

=head2 ICMP

This protocol offers very low overhead (minimum 42 bytes), and can
sometimes tunnel through firewalls when other protocols cannot.

It works by prepending a ICMP header with type C<icmp-type> and a code
of C<255>. The default C<icmp-type> is C<echo-reply>, so the resulting
packets look like echo replies, which looks rather strange to network
admins.

This transport should only be used if other transports (i.e. raw ip) are
not available or undesirable (due to their overhead).

=head2 UDP

This is a good general choice for the transport protocol as UDP packets
tunnel well through most firewalls and routers, and the overhead per
packet is moderate (minimum 58 bytes).

It should be used if RAW IP is not available.

=head2 TCP

This protocol is a very bad choice, as it not only has high overhead (more
than 60 bytes), but the transport also retries on it's own, which leads
to congestion when the link has moderate packet loss (as both the TCP
transport and the tunneled traffic will retry, increasing congestion more
and more). It also has high latency and is quite inefficient.

It's only useful when tunneling through firewalls that block better
protocols. If a node doesn't have direct internet access but a HTTP proxy
that supports the CONNECT method it can be used to tunnel through a web
proxy. For this to work, the C<tcp-port> should be C<443> (C<https>), as
most proxies do not allow connections to other ports.

It is an abuse of the usage a proxy was designed for, so make sure you are
allowed to use it for GVPE.

This protocol also has server and client sides. If the C<tcp-port> is set
to zero, other nodes cannot connect to this node directly (and C<tcp-port>
zero cannot be used). If the C<tcp-port> is non-zero, the node can act
both as a client as well as a server.

=head2 DNS

B<WARNING:> Parsing and generating DNS packets is rather tricky. The code
almost certainly contains buffer overflows and other, likely exploitable,
bugs. You have been warned.

This is the worst choice of transport protocol with respect to overhead
(overhead can be 2-3 times higher than the transferred data), and latency
(which can be many seconds). Some DNS servers might not be prepared to
handle the traffic and drop or corrupt packets. The client also has to
constantly poll the server for data, so the client will constantly create
traffic even if it doesn't need to transport packets.

In addition, the same problems as the TCP transport also plague this
protocol.

Most configuration needs to be done by editing C<src/vpn_dns.C> directly.

It's only use is to tunnel through firewalls that do not allow direct
internet access. Similar to using a HTTP proxy (as the TCP transport
does), it uses a local DNS server/forwarder (given by the C<dns-forw-host>
configuration value) as a proxy to send and receive data as a client,
and a C<NS> record pointing to the GVPE server (as given by the
C<dns-hostname> directive).

The only good side of this protocol is that it can tunnel through most
firewalls undetected, iff the local DNS server/forwarder is sane (which is
true for most routers, wlan gateways and nameservers).

=head1 PART 2: The GNU VPE protocol

This section, unfortunately, is not yet finished, although the protocol
is stable (until bugs in the cryptography are found, which will likely
completely change the following description). Nevertheless, it should give
you some overview over the protocol.

=head2 Anatomy of a VPN packet

The exact layout and field lengths of a VPN packet is determined at
compiletime and doesn't change. The same structure is used for all
transort protocols, be it RAWIP or TCP.

 +------+------+--------+------+
 | HMAC | TYPE | SRCDST | DATA |
 +------+------+--------+------+

The HMAC field is present in all packets, even if not used (e.g. in auth
request packets), in which case it is set to all zeroes. The checksum
itself is calculated over the TYPE, SRCDST and DATA fields in all cases.

The TYPE field is a single byte and determines the purpose of the packet
(e.g. RESET, COMPRESSED/UNCOMPRESSED DATA, PING, AUTH REQUEST/RESPONSE,
CONNECT REQUEST/INFO etc.).

SRCDST is a three byte field which contains the source and destination
node ids (12 bits each). The protocol does not yet scale well beyond 30+
hosts, since all hosts must connect to each other once on startup. But if
restarts are rare or tolerable and most connections are on demand, much
larger networks are feasible.

The DATA portion differs between each packet type, naturally, and is the
only part that can be encrypted. Data packets contain more fields, as
shown:

 +------+------+--------+------+-------+------+
 | HMAC | TYPE | SRCDST | RAND | SEQNO | DATA |
 +------+------+--------+------+-------+------+

RAND is a sequence of fully random bytes, used to increase the entropy of
the data for encryption purposes.

SEQNO is a 32-bit sequence number. It is negotiated at every connection
initialization and starts at some random 31 bit value. VPE currently uses
a sliding window of 512 packets/sequence numbers to detect reordering,
duplication and reply attacks.

=head2 The authentification protocol

Before hosts can exchange packets, they need to establish authenticity of
the other side and a key. Every host has a private RSA key and the public
RSA keys of all other hosts.

A host establishes a simplex connection by sending the other host a
RSA encrypted challenge containing a random challenge (consisting of
the encryption key to use when sending packets, more random data and
PKCS1_OAEP padding) and a random 16 byte "challenge-id" (used to detect
duplicate auth packets). The destination host will respond by replying
with an (unencrypted) RIPEMD160 hash of the decrypted challenge, which
will authentify that host. The destination host will also set the outgoing
encryption parameters as given in the packet.

When the source host receives a correct auth reply (by verifying the
hash and the id, which will expire after 120 seconds), it will start to
accept data packets from the destination host.

This means that a host can only initate a simplex connection, telling the
other side the key it has to use when it sends packets. The challenge
reply is only used to set the current IP address of the other side and
protocol parameters.

This protocol is completely symmetric, so to be able to send packets the
destination host must send a challenge in the exact same way as already
described (so, in essence, two simplex connections are created per host
pair).

=head2 Retrying

When there is no response to an auth request, the host will send auth
requests in bursts with an exponential backoff. After some time it will
resort to PING packets, which are very small (8 bytes) and lightweight
(no RSA operations required). A host that receives ping requests from an
unconnected peer will respond by trying to create a connection.

In addition to the exponential backoff, there is a global rate-limit on
a per-IP base. It allows long bursts but will limit total packet rate to
something like one control packet every ten seconds, to avoid accidental
floods due to protocol problems (like a RSA key file mismatch between two
hosts).

=head2 Routing and Protocol translation

The gvpe routing algorithm is easy: there isn't any routing. GVPE always
tries to establish direct connections, if the protocol abilities of the
two hosts allow it.

If the two hosts should be able to reach each other (common protocol, ip
and port all known), but cannot (network down), then there will be no
connection, point.

A host can usually declare itself unreachable directly by setting it's
port number(s) to zero. It can declare other hosts as unreachable by using
a config-file that disables all protocols for these other hosts.

If two hosts cannot connect to each other because their IP address(es)
are not known (such as dialup hosts), one side will send a connection
request to a router (routers must be configured to act as routers!), which
will send both the originating and the destination host a connection info
request with protocol information and IP address of the other host (if
known). Both hosts will then try to establish a connection to the other
peer, which is usually possible even when both hosts are behind a NAT
gateway.

If the hosts cannot reach each other because they have no common protocol,
the originator instead use the router with highest priority and matching
protocol as peer. Since the SRCDST field is not encrypted, the router host
can just forward the packet to the destination host. Since each host uses
it's own private key, the router will not be able to decrypt or encrypt
packets, it will just act as a simple router and protocol translator.

When no router is connected, the host will aggressively try to connect to
all routers, and if a router is asked for an unconnected host it will try
to ask another router to establish the connection.

... more not yet written about the details of the routing, please bug me
...

